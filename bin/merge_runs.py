import click
from qiime2.plugins import feature_table
from .qiime2_pipeline import *

"""
This script is meant to merge separate MiSeq runs into a single workable analysis. It also supports filtering the merged
tables down to a select set of samples. Specifically, it will merge the rep_seqs and dada2 table artifacts produced by
ampliconpipeline.py, usually with the --filtering_flag.

Example scenario:
We have two runs containing multiple sample types (veal, beef, sprouts).
We only want to look at the sprout samples across the two runs, so we can first merge them, and then filter them
down with this script. The final analysis files will only contain the sprouts samples.
"""


def merge_run_tables(table1_artifact_path, table2_artifact_path):
    """
    :param table1_artifact_path:
    :param table2_artifact_path:
    :return:
    """
    table1 = load_data_artifact(table1_artifact_path)
    table2 = load_data_artifact(table2_artifact_path)
    dada2_filtered_table = feature_table.actions.merge(table1=table1, table2=table2).merged_table
    return dada2_filtered_table


def merge_run_repseqs(repseqs1_artifact_path, repseqs2_artifact_path):
    """
    :param repseqs1_artifact_path:
    :param repseqs2_artifact_path:
    :return:
    """
    repseqs1 = load_data_artifact(repseqs1_artifact_path)
    repseqs2 = load_data_artifact(repseqs2_artifact_path)
    dada2_filtered_rep_seqs = feature_table.actions.merge_seq_data(repseqs1, repseqs2).merged_data
    return dada2_filtered_rep_seqs


# TODO: https://docs.qiime2.org/2017.12/plugins/available/feature-table/filter-samples/
def filter_run_tables(sample_id_file, dada2_table):
    """
    This takes a list of sample IDs (must be present in your metadata for the merged runs) and then filters the
    dada2 table down to only the requested samples
    :param sample_id_file: path to text file containing selected IDs
    :param dada2_table: dada2 table artifact
    :return: filtered dada2 table artifact
    """
    samples = load_sample_metadata(sample_id_file)
    filtered_table = feature_table.actions.filter_samples(table=dada2_table, metadata=samples).filtered_table
    return filtered_table


def filter_run_repseqs(sample_id_file, dada2_rep_seqs):
    """
    Same as filter_run_tables, except operates with the rep_seqs artifact
    :param sample_id_file: path to text file containing selected IDs
    :param dada2_rep_seqs: representative sequences artifact
    :return: filtered representative sequences artifact
    """
    samples = load_sample_metadata(sample_id_file)
    rep_seqs = feature_table.actions.filter_seqs(data=dada2_rep_seqs, metadata=samples, exclude_ids=True).filtered_data
    return rep_seqs


@click.command()
@click.option('-b', '--base_dir',
              type=click.Path(exists=False),
              required=True,
              help='Base directory for all output from QIIME2-MERGE Pipeline.')
@click.option('-m', '--sample_metadata_path',
              type=click.Path(exists=True),
              required=True,
              help='Path to QIIME2 tab-separated metadata file')
@click.option('-c', '--classifier_artifact_path',
              type=click.Path(exists=True),
              required=True,
              help='Path to QIIME2 Classifier Artifact')
@click.option('-t1', '--table1_artifact_path',
              type=click.Path(exists=True),
              required=True,
              help='Path to first table artifact generated by DADA2 for merging')
@click.option('-t2', '--table2_artifact_path',
              type=click.Path(exists=True),
              required=True,
              help='Path to second table artifact generated by DADA2 for merging')
@click.option('-rs1', '--repseqs1_artifact_path',
              type=click.Path(exists=True),
              required=True,
              help='Path to first representative sequences artifact generated by DADA2 for merging')
@click.option('-rs2', '--repseqs2_artifact_path',
              type=click.Path(exists=True),
              required=True,
              help='Path to second representative sequences artifact generated by DADA2 for merging')
@click.option('-f', '--filtering_list',
              required=False,
              type=click.Path(exists=True),
              default=None,
              help='Path to text file containing sample IDs that you wish to keep for the analysis')
def run_merge_pipeline(base_dir, sample_metadata_path, classifier_artifact_path,
                       table1_artifact_path, table2_artifact_path, repseqs1_artifact_path, repseqs2_artifact_path,
                       filtering_list):
    """
    1. Load and merge dada2 results from two previous runs
    2. Multiple sequence alignment and masking of highly variable regions
    3. Generate a phylogenetic tree
    4. Load an existing qiime2 classifier artifact
    5. Generate alpha rarefaction curves
    6. Conduct taxonomic analysis
    7. Generate taxonomy barplots
    8. Run diversity metrics

    :param base_dir:
    :param sample_metadata_path:
    :param classifier_artifact_path:
    :param table1_artifact_path:
    :param table2_artifact_path:
    :param repseqs1_artifact_path:
    :param repseqs2_artifact_path:
    """
    # Load metadata
    metadata_object = load_sample_metadata(sample_metadata_path)

    # Merge runs
    dada2_merged_table = merge_run_tables(table1_artifact_path, table2_artifact_path)
    dada2_merged_rep_seqs = merge_run_repseqs(repseqs1_artifact_path, repseqs2_artifact_path)

    # Filter runs
    if filtering_list is not None:
        dada2_merged_table = filter_run_tables(sample_id_file=filtering_list,
                                               dada2_table=dada2_merged_table)
        dada2_merged_rep_seqs = filter_run_repseqs(sample_id_file=filtering_list,
                                                   dada2_rep_seqs=dada2_merged_rep_seqs)

    # Continue pipeline as normal
    # Visualize dada2
    feature_table_summary = visualize_dada2(base_dir=base_dir,
                                            dada2_filtered_table=dada2_merged_table,
                                            dada2_filtered_rep_seqs=dada2_merged_rep_seqs,
                                            metadata_object=metadata_object)

    # Mask and alignment
    (seq_mask, seq_alignment) = seq_alignment_mask(base_dir=base_dir,
                                                   dada2_filtered_rep_seqs=dada2_merged_rep_seqs)

    # Phylogenetic tree
    (phylo_unrooted_tree, phylo_rooted_tree) = phylo_tree(base_dir=base_dir, seq_mask=seq_mask)

    # Export tree
    export_newick(base_dir=base_dir, tree=phylo_rooted_tree)

    # Load classifier
    classifier = load_classifier_artifact(classifier_artifact_path=classifier_artifact_path)

    # Produce rarefaction visualization
    alpha_rarefaction_viz = alpha_rarefaction_visualization(base_dir=base_dir,
                                                            dada2_filtered_table=dada2_merged_table)

    # Run taxonomic analysis
    taxonomy_analysis = classify_taxonomy(base_dir=base_dir,
                                          dada2_filtered_rep_seqs=dada2_merged_rep_seqs,
                                          classifier=classifier)

    # Visualize taxonomy
    taxonomy_metadata = visualize_taxonomy(base_dir=base_dir,
                                           metadata_object=metadata_object,
                                           taxonomy_analysis=taxonomy_analysis,
                                           dada2_filtered_table=dada2_merged_table)

    # Alpha and beta diversity
    diversity_metrics = run_diversity_metrics(base_dir=base_dir,
                                              dada2_filtered_table=dada2_merged_table,
                                              phylo_rooted_tree=phylo_rooted_tree,
                                              metadata_object=metadata_object)


if __name__ == '__main__':
    run_merge_pipeline()
